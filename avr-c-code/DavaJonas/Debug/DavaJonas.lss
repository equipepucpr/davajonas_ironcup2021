
DavaJonas.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000190  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007e3  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e2  00000000  00000000  00000a7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000398  00000000  00000000  00001161  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  000014fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039f  00000000  00000000  00001570  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000157  00000000  00000000  0000190f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001a66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 7a 00 	call	0xf4	; 0xf4 <main>
  88:	0c 94 c6 00 	jmp	0x18c	; 0x18c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <MotorL>:
	// leftMotor1=0 and leftMotor2=0 -> stopped / parado / parado
	// leftMotor1=0 and leftMotor2=1 -> moves forward / avanca / avanzar
	// leftMotor1=1 and leftMotor2=0 -> moves back / recua / retrocede
	// leftMotor1=1 and leftMotor2=1 -> stopped (braked) / parado (travado) / parado (frenado)
	
	if(pwm==0){
  90:	00 97       	sbiw	r24, 0x00	; 0
  92:	39 f4       	brne	.+14     	; 0xa2 <MotorL+0x12>
		PORTD &= ~(1 << leftMotor1);
  94:	8b b1       	in	r24, 0x0b	; 11
  96:	8f 77       	andi	r24, 0x7F	; 127
  98:	8b b9       	out	0x0b, r24	; 11
		PORTB &= ~(1 << leftMotor2);
  9a:	85 b1       	in	r24, 0x05	; 5
  9c:	8e 7f       	andi	r24, 0xFE	; 254
  9e:	85 b9       	out	0x05, r24	; 5
  a0:	08 95       	ret
	}
	else if(pwm<0)
  a2:	99 23       	and	r25, r25
  a4:	3c f4       	brge	.+14     	; 0xb4 <MotorL+0x24>
	{
		//analogWrite(pwmL, -pwm); TODO
		PORTD |= (1 << leftMotor1);
  a6:	8b b1       	in	r24, 0x0b	; 11
  a8:	80 68       	ori	r24, 0x80	; 128
  aa:	8b b9       	out	0x0b, r24	; 11
		PORTB &= ~(1 << leftMotor2);
  ac:	85 b1       	in	r24, 0x05	; 5
  ae:	8e 7f       	andi	r24, 0xFE	; 254
  b0:	85 b9       	out	0x05, r24	; 5
  b2:	08 95       	ret
	}
	else
	{
		//analogWrite(pwmL, pwm); TODO
		PORTD &= ~(1 << leftMotor1);
  b4:	8b b1       	in	r24, 0x0b	; 11
  b6:	8f 77       	andi	r24, 0x7F	; 127
  b8:	8b b9       	out	0x0b, r24	; 11
		PORTD |= (1 << leftMotor2);
  ba:	8b b1       	in	r24, 0x0b	; 11
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	8b b9       	out	0x0b, r24	; 11
  c0:	08 95       	ret

000000c2 <MotorR>:
	// rightMotor1=0 and rightMotor2=0 -> stopped / parado / parado
	// rightMotor1=0 and rightMotor2=1 -> moves forward / avanca / avanzar
	// rightMotor1=1 and rightMotor2=0 -> moves back / recua / retrocede
	// rightMotor1=1 and rightMotor2=1 -> stopped (braked) / parado (travado) / parado (frenado)
	
	if(pwm==0){
  c2:	00 97       	sbiw	r24, 0x00	; 0
  c4:	39 f4       	brne	.+14     	; 0xd4 <MotorR+0x12>
		PORTD &= ~(1 << rightMotor1);
  c6:	8b b1       	in	r24, 0x0b	; 11
  c8:	8f 7d       	andi	r24, 0xDF	; 223
  ca:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1 << rightMotor2);
  cc:	8b b1       	in	r24, 0x0b	; 11
  ce:	8f 7e       	andi	r24, 0xEF	; 239
  d0:	8b b9       	out	0x0b, r24	; 11
  d2:	08 95       	ret
	}
	else if(pwm<0)
  d4:	99 23       	and	r25, r25
  d6:	3c f4       	brge	.+14     	; 0xe6 <MotorR+0x24>
	{
		//analogWrite(pwmR, -pwm); TODO
		PORTD |= (1 << rightMotor1);
  d8:	8b b1       	in	r24, 0x0b	; 11
  da:	80 62       	ori	r24, 0x20	; 32
  dc:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1 << rightMotor2);
  de:	8b b1       	in	r24, 0x0b	; 11
  e0:	8f 7e       	andi	r24, 0xEF	; 239
  e2:	8b b9       	out	0x0b, r24	; 11
  e4:	08 95       	ret
	}
	else
	{
		//analogWrite(pwmR, pwm); TODO
		PORTD &= ~(1 << rightMotor1);
  e6:	8b b1       	in	r24, 0x0b	; 11
  e8:	8f 7d       	andi	r24, 0xDF	; 223
  ea:	8b b9       	out	0x0b, r24	; 11
		PORTD |= (1 << rightMotor2);
  ec:	8b b1       	in	r24, 0x0b	; 11
  ee:	80 61       	ori	r24, 0x10	; 16
  f0:	8b b9       	out	0x0b, r24	; 11
  f2:	08 95       	ret

000000f4 <main>:

int main(void)
{
	/****************PINOUT CONFIG****************/
	// OUTPUTS
	DDRD = ((1 << LED) | (1 << leftMotor1) | (1 << pwmR) | (1 << rightMotor1) | (1 << rightMotor2));
  f4:	88 ef       	ldi	r24, 0xF8	; 248
  f6:	8a b9       	out	0x0a, r24	; 10
	DDRB = ((1 << pwmL) | (1 << leftMotor2));
  f8:	83 e0       	ldi	r24, 0x03	; 3
  fa:	84 b9       	out	0x04, r24	; 4
	
	//LEFT MOTOR PWM SETTING
	TCCR1A = (1 << COM1A1) | (1 << WGM10);
  fc:	81 e8       	ldi	r24, 0x81	; 129
  fe:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM12) | (1 << CS11) | (1 << CS10);
 102:	8b e0       	ldi	r24, 0x0B	; 11
 104:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	//RIGHT MOTOR PWM SETTING
	TCCR2A = (1 << COM2B1) | (1 << WGM21) | (1 << WGM20);
 108:	83 e2       	ldi	r24, 0x23	; 35
 10a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (1 << CS22);
 10e:	84 e0       	ldi	r24, 0x04	; 4
 110:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	
	//ADC INIT
	ADCSRA = (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2) | (1 << ADEN);
 114:	87 e8       	ldi	r24, 0x87	; 135
 116:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	ADMUX = (1 << REFS0); //set ADC VRef to AVCC
 11a:	80 e4       	ldi	r24, 0x40	; 64
 11c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	
	// INPUTS: DO NOT CHANGE / NAO MUDAR / NO CAMBIAR
	// DIP switch
	DDRB |= PB3;
 120:	84 b1       	in	r24, 0x04	; 4
 122:	83 60       	ori	r24, 0x03	; 3
 124:	84 b9       	out	0x04, r24	; 4
	PORTB = 0;
 126:	15 b8       	out	0x05, r1	; 5
	//PORTB = ((1 << DIP1) | (1 << DIP2) | (1 << DIP3) | (1 << DIP4)); //setting internal pullups
	/****************PINOUT CONFIG - END***************/
	
	/***************INITIAL CONDITIONS*****************/
	PORTB &= ~(1 << LED); // LED off / LED desligado / LED apagado
 128:	85 b1       	in	r24, 0x05	; 5
 12a:	8f 7b       	andi	r24, 0xBF	; 191
 12c:	85 b9       	out	0x05, r24	; 5
	MotorL(0); // left motor stopped / motor esquerdo parado / motor izquierdo parado
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 48 00 	call	0x90	; 0x90 <MotorL>
	MotorR(0); // right motor stopped / motor direito parado / motor derecho parado
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 61 00 	call	0xc2	; 0xc2 <MotorR>
	/*************INITIAL CONDITIONS - END*************/
	
	int ledOn = 0;
 13e:	20 e0       	ldi	r18, 0x00	; 0
 140:	30 e0       	ldi	r19, 0x00	; 0
    while (1) 
    {
		ADCSRA |= (1 << ADSC);
 142:	ea e7       	ldi	r30, 0x7A	; 122
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	80 64       	ori	r24, 0x40	; 64
 14a:	80 83       	st	Z, r24
		while (!(ADCSRA & (1 << ADIF))) {};
 14c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 150:	84 ff       	sbrs	r24, 4
 152:	fc cf       	rjmp	.-8      	; 0x14c <main+0x58>
		if(ADC > 102 && ADC < 153){
 154:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 158:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 15c:	87 36       	cpi	r24, 0x67	; 103
 15e:	91 05       	cpc	r25, r1
 160:	80 f3       	brcs	.-32     	; 0x142 <main+0x4e>
 162:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 166:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 16a:	89 39       	cpi	r24, 0x99	; 153
 16c:	91 05       	cpc	r25, r1
 16e:	48 f7       	brcc	.-46     	; 0x142 <main+0x4e>
			if(!ledOn){
 170:	23 2b       	or	r18, r19
 172:	31 f4       	brne	.+12     	; 0x180 <main+0x8c>
				PORTB |= 1 << PB3;
 174:	85 b1       	in	r24, 0x05	; 5
 176:	88 60       	ori	r24, 0x08	; 8
 178:	85 b9       	out	0x05, r24	; 5
				ledOn = 1;
 17a:	21 e0       	ldi	r18, 0x01	; 1
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	e1 cf       	rjmp	.-62     	; 0x142 <main+0x4e>
			} else {
			PORTB &= ~(1 << PB3);
 180:	85 b1       	in	r24, 0x05	; 5
 182:	87 7f       	andi	r24, 0xF7	; 247
 184:	85 b9       	out	0x05, r24	; 5
			ledOn = 0;
 186:	20 e0       	ldi	r18, 0x00	; 0
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	db cf       	rjmp	.-74     	; 0x142 <main+0x4e>

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
