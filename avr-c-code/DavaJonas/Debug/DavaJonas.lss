
DavaJonas.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000134  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007dc  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e5  00000000  00000000  00000a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000302  00000000  00000000  00001101  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001404  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000399  00000000  00000000  00001478  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e3  00000000  00000000  00001811  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000018f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  78:	0c 94 98 00 	jmp	0x130	; 0x130 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <MotorL>:
	// leftMotor1=0 and leftMotor2=0 -> stopped / parado / parado
	// leftMotor1=0 and leftMotor2=1 -> moves forward / avanca / avanzar
	// leftMotor1=1 and leftMotor2=0 -> moves back / recua / retrocede
	// leftMotor1=1 and leftMotor2=1 -> stopped (braked) / parado (travado) / parado (frenado)
	
	if(pwm==0){
  80:	00 97       	sbiw	r24, 0x00	; 0
  82:	39 f4       	brne	.+14     	; 0x92 <MotorL+0x12>
		PORTD &= ~(1 << leftMotor1);
  84:	8b b1       	in	r24, 0x0b	; 11
  86:	8f 77       	andi	r24, 0x7F	; 127
  88:	8b b9       	out	0x0b, r24	; 11
		PORTB &= ~(1 << leftMotor2);
  8a:	85 b1       	in	r24, 0x05	; 5
  8c:	8e 7f       	andi	r24, 0xFE	; 254
  8e:	85 b9       	out	0x05, r24	; 5
  90:	08 95       	ret
	}
	else if(pwm<0)
  92:	99 23       	and	r25, r25
  94:	3c f4       	brge	.+14     	; 0xa4 <MotorL+0x24>
	{
		//analogWrite(pwmL, -pwm); TODO
		PORTD |= (1 << leftMotor1);
  96:	8b b1       	in	r24, 0x0b	; 11
  98:	80 68       	ori	r24, 0x80	; 128
  9a:	8b b9       	out	0x0b, r24	; 11
		PORTB &= ~(1 << leftMotor2);
  9c:	85 b1       	in	r24, 0x05	; 5
  9e:	8e 7f       	andi	r24, 0xFE	; 254
  a0:	85 b9       	out	0x05, r24	; 5
  a2:	08 95       	ret
	}
	else
	{
		//analogWrite(pwmL, pwm); TODO
		PORTD &= ~(1 << leftMotor1);
  a4:	8b b1       	in	r24, 0x0b	; 11
  a6:	8f 77       	andi	r24, 0x7F	; 127
  a8:	8b b9       	out	0x0b, r24	; 11
		PORTD |= (1 << leftMotor2);
  aa:	8b b1       	in	r24, 0x0b	; 11
  ac:	81 60       	ori	r24, 0x01	; 1
  ae:	8b b9       	out	0x0b, r24	; 11
  b0:	08 95       	ret

000000b2 <MotorR>:
	// rightMotor1=0 and rightMotor2=0 -> stopped / parado / parado
	// rightMotor1=0 and rightMotor2=1 -> moves forward / avanca / avanzar
	// rightMotor1=1 and rightMotor2=0 -> moves back / recua / retrocede
	// rightMotor1=1 and rightMotor2=1 -> stopped (braked) / parado (travado) / parado (frenado)
	
	if(pwm==0){
  b2:	00 97       	sbiw	r24, 0x00	; 0
  b4:	39 f4       	brne	.+14     	; 0xc4 <MotorR+0x12>
		PORTD &= ~(1 << rightMotor1);
  b6:	8b b1       	in	r24, 0x0b	; 11
  b8:	8f 7d       	andi	r24, 0xDF	; 223
  ba:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1 << rightMotor2);
  bc:	8b b1       	in	r24, 0x0b	; 11
  be:	8f 7e       	andi	r24, 0xEF	; 239
  c0:	8b b9       	out	0x0b, r24	; 11
  c2:	08 95       	ret
	}
	else if(pwm<0)
  c4:	99 23       	and	r25, r25
  c6:	3c f4       	brge	.+14     	; 0xd6 <MotorR+0x24>
	{
		//analogWrite(pwmR, -pwm); TODO
		PORTD |= (1 << rightMotor1);
  c8:	8b b1       	in	r24, 0x0b	; 11
  ca:	80 62       	ori	r24, 0x20	; 32
  cc:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1 << rightMotor2);
  ce:	8b b1       	in	r24, 0x0b	; 11
  d0:	8f 7e       	andi	r24, 0xEF	; 239
  d2:	8b b9       	out	0x0b, r24	; 11
  d4:	08 95       	ret
	}
	else
	{
		//analogWrite(pwmR, pwm); TODO
		PORTD &= ~(1 << rightMotor1);
  d6:	8b b1       	in	r24, 0x0b	; 11
  d8:	8f 7d       	andi	r24, 0xDF	; 223
  da:	8b b9       	out	0x0b, r24	; 11
		PORTD |= (1 << rightMotor2);
  dc:	8b b1       	in	r24, 0x0b	; 11
  de:	80 61       	ori	r24, 0x10	; 16
  e0:	8b b9       	out	0x0b, r24	; 11
  e2:	08 95       	ret

000000e4 <main>:

int main(void)
{
	/****************PINOUT CONFIG****************/
	// OUTPUTS
	DDRD = ((1 << LED) | (1 << leftMotor1) | (1 << pwmR) | (1 << rightMotor1) | (1 << rightMotor2));
  e4:	88 ef       	ldi	r24, 0xF8	; 248
  e6:	8a b9       	out	0x0a, r24	; 10
	DDRB = ((1 << pwmL) | (1 << leftMotor2));
  e8:	83 e0       	ldi	r24, 0x03	; 3
  ea:	84 b9       	out	0x04, r24	; 4
	
	//LEFT MOTOR PWM SETTING
	TCCR1A = (1 << COM1A1) | (1 << WGM10);
  ec:	81 e8       	ldi	r24, 0x81	; 129
  ee:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM12) | (1 << CS11) | (1 << CS10);
  f2:	8b e0       	ldi	r24, 0x0B	; 11
  f4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	//RIGHT MOTOR PWM SETTING
	TCCR2A = (1 << COM2B1) | (1 << WGM21) | (1 << WGM20);
  f8:	83 e2       	ldi	r24, 0x23	; 35
  fa:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = (1 << CS22);
  fe:	84 e0       	ldi	r24, 0x04	; 4
 100:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	
	// INPUTS: DO NOT CHANGE / NAO MUDAR / NO CAMBIAR
	// DIP switch
	PORTB = ((1 << DIP1) | (1 << DIP2) | (1 << DIP3) | (1 << DIP4)); //setting internal pullups
 104:	8c e3       	ldi	r24, 0x3C	; 60
 106:	85 b9       	out	0x05, r24	; 5
	/****************PINOUT CONFIG - END***************/
	
	/***************INITIAL CONDITIONS*****************/
	PORTB &= ~(1 << LED); // LED off / LED desligado / LED apagado
 108:	85 b1       	in	r24, 0x05	; 5
 10a:	8f 7b       	andi	r24, 0xBF	; 191
 10c:	85 b9       	out	0x05, r24	; 5
	MotorL(0); // left motor stopped / motor esquerdo parado / motor izquierdo parado
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 40 00 	call	0x80	; 0x80 <MotorL>
	MotorR(0); // right motor stopped / motor direito parado / motor derecho parado
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 59 00 	call	0xb2	; 0xb2 <MotorR>
	/*************INITIAL CONDITIONS - END*************/
    /* Replace with your application code */
	OCR1A = 0x7F;
 11e:	8f e7       	ldi	r24, 0x7F	; 127
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 126:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR2B = 0x7F;
 12a:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 12e:	ff cf       	rjmp	.-2      	; 0x12e <main+0x4a>

00000130 <_exit>:
 130:	f8 94       	cli

00000132 <__stop_program>:
 132:	ff cf       	rjmp	.-2      	; 0x132 <__stop_program>
